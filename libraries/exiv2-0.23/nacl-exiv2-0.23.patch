diff -Naur exiv2-0.23/config/config.sub exiv2-0.23/config/b/config.sub
--- exiv2-0.23/config/config.sub	2011-01-14 03:12:14.000000000 +0100
+++ exiv2-0.23/config/b/config.sub	2012-10-11 11:33:57.941768644 +0200
@@ -798,6 +798,10 @@
 		basic_machine=i370-ibm
 		os=-mvs
 		;;
+	nacl*)
+		basic_machine=i686-pc
+		os=-nacl
+		;;
 	ncr3000)
 		basic_machine=i486-ncr
 		os=-sysv4
@@ -1325,7 +1329,7 @@
 	      | -os2* | -vos* | -palmos* | -uclinux* | -nucleus* \
 	      | -morphos* | -superux* | -rtmk* | -rtmk-nova* | -windiss* \
 	      | -powermax* | -dnix* | -nx6 | -nx7 | -sei* | -dragonfly* \
-	      | -skyos* | -haiku* | -rdos* | -toppers* | -drops* | -es*)
+	      | -skyos* | -haiku* | -rdos* | -toppers* | -drops* | -es* | -nacl*)
 	# Remember, each alternative MUST END IN *, to match a version number.
 		;;
 	-qnx*)
--- exiv2-0.23/src/localtime.c	2010-09-11 22:02:32.000000000 +0200
+++ exiv2-0.23/src/b/localtime.c	2012-10-15 17:14:58.084089674 +0200
@@ -271,7 +271,7 @@
 				doaccess = TRUE;
 			name = fullname;
 		}
-		if (doaccess && access(name, R_OK) != 0)
+		if (doaccess && 0 != 0)
 			return -1;
 		if ((fid = open(name, OPEN_MODE)) == -1)
 			return -1;
--- exiv2-0.23/configure	2012-04-23 16:28:19.000000000 +0200
+++ exiv2-0.23/b/configure	2012-10-12 10:55:54.590417480 +0200
@@ -15630,7 +15630,8 @@
 
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
 $as_echo "yes" >&6; }
-ZLIB_HOME=/usr/local
+#ZLIB_HOME=/usr/local
+ZLIB_HOME=${NACL_SDK_ROOT}toolchain/linux_x86_newlib/${NACL_CROSS_PREFIX}/usr
 if test ! -f "${ZLIB_HOME}/include/zlib.h"
 then
 	ZLIB_HOME=/usr
--- exiv2-0.23/src/actions.cpp	2012-03-22 16:19:35.000000000 +0100
+++ exiv2-0.23/src/b/actions.cpp	2012-10-12 14:33:10.091425676 +0200
@@ -1754,7 +1754,7 @@
         struct utimbuf buf;
         buf.actime = actime_;
         buf.modtime = modtime_;
-        return utime(path.c_str(), &buf);
+        return 0;//return utime(path.c_str(), &buf);
     }
     //! @endcond
 
--- exiv2-0.23/src/basicio.cpp	2012-03-24 14:00:00.000000000 +0100
+++ exiv2-0.23/src/b/basicio.cpp	2012-10-12 18:54:41.841236874 +0200
@@ -171,84 +171,13 @@
 #endif
     int FileIo::Impl::switchMode(OpMode opMode)
     {
-        assert(fp_ != 0);
-        if (opMode_ == opMode) return 0;
-        OpMode oldOpMode = opMode_;
-        opMode_ = opMode;
-
-        bool reopen = true;
-        switch(opMode) {
-        case opRead:
-            // Flush if current mode allows reading, else reopen (in mode "r+b"
-            // as in this case we know that we can write to the file)
-            if (openMode_[0] == 'r' || openMode_[1] == '+') reopen = false;
-            break;
-        case opWrite:
-            // Flush if current mode allows writing, else reopen
-            if (openMode_[0] != 'r' || openMode_[1] == '+') reopen = false;
-            break;
-        case opSeek:
-            reopen = false;
-            break;
-        }
-
-        if (!reopen) {
-            // Don't do anything when switching _from_ opSeek mode; we
-            // flush when switching _to_ opSeek.
-            if (oldOpMode == opSeek) return 0;
-
-            // Flush. On msvcrt fflush does not do the job
-            std::fseek(fp_, 0, SEEK_CUR);
-            return 0;
-        }
 
-        // Reopen the file
-        long offset = std::ftell(fp_);
-        if (offset == -1) return -1;
-        // 'Manual' open("r+b") to avoid munmap()
-        if (fp_ != 0) {
-            std::fclose(fp_);
-            fp_= 0;
-        }
-        openMode_ = "r+b";
-        opMode_ = opSeek;
-#ifdef EXV_UNICODE_PATH
-        if (wpMode_ == wpUnicode) {
-            fp_ = ::_wfopen(wpath_.c_str(), s2ws(openMode_).c_str());
-        }
-        else
-#endif
-        {
-            fp_ = std::fopen(path_.c_str(), openMode_.c_str());
-        }
-        if (!fp_) return 1;
-        return std::fseek(fp_, offset, SEEK_SET);
+        return 0;
     } // FileIo::Impl::switchMode
 
     int FileIo::Impl::stat(StructStat& buf) const
     {
         int ret = 0;
-#ifdef EXV_UNICODE_PATH
-        if (wpMode_ == wpUnicode) {
-            struct _stat st;
-            ret = ::_wstat(wpath_.c_str(), &st);
-            if (0 == ret) {
-                buf.st_size = st.st_size;
-                buf.st_mode = st.st_mode;
-                buf.st_nlink = st.st_nlink;
-            }
-        }
-        else
-#endif
-        {
-            struct stat st;
-            ret = ::stat(path_.c_str(), &st);
-            if (0 == ret) {
-                buf.st_size = st.st_size;
-                buf.st_mode = st.st_mode;
-                buf.st_nlink = st.st_nlink;
-            }
-        }
         return ret;
     } // FileIo::Impl::stat
 
@@ -257,34 +186,6 @@
     {
         DWORD nlink = 1;
 
-        HANDLE hFd = (HANDLE)_get_osfhandle(fileno(fp_));
-        if (hFd != INVALID_HANDLE_VALUE) {
-            typedef BOOL (WINAPI * GetFileInformationByHandle_t)(HANDLE, LPBY_HANDLE_FILE_INFORMATION);
-            HMODULE hKernel = LoadLibraryA("kernel32.dll");
-            if (hKernel) {
-                GetFileInformationByHandle_t pfcn_GetFileInformationByHandle = (GetFileInformationByHandle_t)GetProcAddress(hKernel, "GetFileInformationByHandle");
-                if (pfcn_GetFileInformationByHandle) {
-                    BY_HANDLE_FILE_INFORMATION fi = {0};
-                    if (pfcn_GetFileInformationByHandle(hFd, &fi)) {
-                        nlink = fi.nNumberOfLinks;
-                    }
-#ifdef DEBUG
-                    else EXV_DEBUG << "GetFileInformationByHandle failed\n";
-#endif
-                }
-#ifdef DEBUG
-                else EXV_DEBUG << "GetProcAddress(hKernel, \"GetFileInformationByHandle\") failed\n";
-#endif
-                FreeLibrary(hKernel);
-            }
-#ifdef DEBUG
-            else EXV_DEBUG << "LoadLibraryA(\"kernel32.dll\") failed\n";
-#endif
-        }
-#ifdef DEBUG
-        else EXV_DEBUG << "_get_osfhandle failed: INVALID_HANDLE_VALUE\n";
-#endif
-
         return nlink;
     } // FileIo::Impl::winNumberOfLinks
 
@@ -303,602 +204,127 @@
 #endif
     FileIo::~FileIo()
     {
-        close();
-        delete p_;
+ 
     }
 
     int FileIo::munmap()
     {
         int rc = 0;
-        if (p_->pMappedArea_ != 0) {
-#if defined EXV_HAVE_MMAP && defined EXV_HAVE_MUNMAP
-            if (::munmap(p_->pMappedArea_, p_->mappedLength_) != 0) {
-                rc = 1;
-            }
-#elif defined WIN32 && !defined __CYGWIN__
-            UnmapViewOfFile(p_->pMappedArea_);
-            CloseHandle(p_->hMap_);
-            p_->hMap_ = 0;
-            CloseHandle(p_->hFile_);
-            p_->hFile_ = 0;
-#else
-            if (p_->isWriteable_) {
-                seek(0, BasicIo::beg);
-                write(p_->pMappedArea_, p_->mappedLength_);
-            }
-            if (p_->isMalloced_) {
-                delete[] p_->pMappedArea_;
-                p_->isMalloced_ = false;
-            }
-#endif
-        }
-        if (p_->isWriteable_) {
-            if (p_->fp_ != 0) p_->switchMode(Impl::opRead);
-            p_->isWriteable_ = false;
-        }
-        p_->pMappedArea_ = 0;
-        p_->mappedLength_ = 0;
+
         return rc;
     }
 
     byte* FileIo::mmap(bool isWriteable)
     {
-        assert(p_->fp_ != 0);
-        if (munmap() != 0) {
-#ifdef EXV_UNICODE_PATH
-            if (p_->wpMode_ == Impl::wpUnicode) {
-                throw WError(2, wpath(), strError().c_str(), "munmap");
-            }
-            else
-#endif
-            {
-                throw Error(2, path(), strError(), "munmap");
-            }
-        }
-        p_->mappedLength_ = size();
-        p_->isWriteable_ = isWriteable;
-        if (p_->isWriteable_ && p_->switchMode(Impl::opWrite) != 0) {
-#ifdef EXV_UNICODE_PATH
-            if (p_->wpMode_ == Impl::wpUnicode) {
-                throw WError(16, wpath(), strError().c_str());
-            }
-            else
-#endif
-            {
-                throw Error(16, path(), strError());
-            }
-        }
-#if defined EXV_HAVE_MMAP && defined EXV_HAVE_MUNMAP
-        int prot = PROT_READ;
-        if (p_->isWriteable_) {
-            prot |= PROT_WRITE;
-        }
-        void* rc = ::mmap(0, p_->mappedLength_, prot, MAP_SHARED, fileno(p_->fp_), 0);
-        if (MAP_FAILED == rc) {
-#ifdef EXV_UNICODE_PATH
-            if (p_->wpMode_ == Impl::wpUnicode) {
-                throw WError(2, wpath(), strError().c_str(), "mmap");
-            }
-            else
-#endif
-            {
-                throw Error(2, path(), strError(), "mmap");
-            }
-        }
-        p_->pMappedArea_ = static_cast<byte*>(rc);
-
-#elif defined WIN32 && !defined __CYGWIN__
-        // Windows implementation
+       
+        //p_->pMappedArea_ = static_cast<byte*>();
 
-        // TODO: An attempt to map a file with a length of 0 (zero) fails with
-        // an error code of ERROR_FILE_INVALID.
-        // Applications should test for files with a length of 0 (zero) and
-        // reject those files.
-
-        DWORD dwAccess = FILE_MAP_READ;
-        DWORD flProtect = PAGE_READONLY;
-        if (isWriteable) {
-            dwAccess = FILE_MAP_WRITE;
-            flProtect = PAGE_READWRITE;
-        }
-        HANDLE hPh = GetCurrentProcess();
-        HANDLE hFd = (HANDLE)_get_osfhandle(fileno(p_->fp_));
-        if (hFd == INVALID_HANDLE_VALUE) {
-#ifdef EXV_UNICODE_PATH
-            if (p_->wpMode_ == Impl::wpUnicode) {
-                throw WError(2, wpath(), "MSG1", "_get_osfhandle");
-            }
-            else
-#endif
-            {
-                throw Error(2, path(), "MSG1", "_get_osfhandle");
-            }
-        }
-        if (!DuplicateHandle(hPh, hFd, hPh, &p_->hFile_, 0, false, DUPLICATE_SAME_ACCESS)) {
-#ifdef EXV_UNICODE_PATH
-            if (p_->wpMode_ == Impl::wpUnicode) {
-                throw WError(2, wpath(), "MSG2", "DuplicateHandle");
-            }
-            else
-#endif
-            {
-                throw Error(2, path(), "MSG2", "DuplicateHandle");
-            }
-        }
-        p_->hMap_ = CreateFileMapping(p_->hFile_, 0, flProtect, 0, (DWORD) p_->mappedLength_, 0);
-        if (p_->hMap_ == 0 ) {
-#ifdef EXV_UNICODE_PATH
-            if (p_->wpMode_ == Impl::wpUnicode) {
-                throw WError(2, wpath(), "MSG3", "CreateFileMapping");
-            }
-            else
-#endif
-            {
-                throw Error(2, path(), "MSG3", "CreateFileMapping");
-            }
-        }
-        void* rc = MapViewOfFile(p_->hMap_, dwAccess, 0, 0, 0);
-        if (rc == 0) {
-#ifdef EXV_UNICODE_PATH
-            if (p_->wpMode_ == Impl::wpUnicode) {
-                throw WError(2, wpath(), "MSG4", "CreateFileMapping");
-            }
-            else
-#endif
-            {
-                throw Error(2, path(), "MSG4", "CreateFileMapping");
-            }
-        }
-        p_->pMappedArea_ = static_cast<byte*>(rc);
-#else
-        // Workaround for platforms without mmap: Read the file into memory
-        DataBuf buf(static_cast<long>(p_->mappedLength_));
-        if (read(buf.pData_, buf.size_) != buf.size_) {
-#ifdef EXV_UNICODE_PATH
-            if (p_->wpMode_ == Impl::wpUnicode) {
-                throw WError(2, wpath(), strError().c_str(), "FileIo::read");
-            }
-            else
-#endif
-            {
-                throw Error(2, path(), strError(), "FileIo::read");
-            }
-        }
-        if (error() || eof()) {
-#ifdef EXV_UNICODE_PATH
-            if (p_->wpMode_ == Impl::wpUnicode) {
-                throw WError(2, wpath(), strError().c_str(), "FileIo::mmap");
-            }
-            else
-#endif
-            {
-                throw Error(2, path(), strError(), "FileIo::mmap");
-            }
-        }
-        p_->pMappedArea_ = buf.release().first;
-        p_->isMalloced_ = true;
-#endif
-        return p_->pMappedArea_;
+        return (byte*)0;
     }
 
     BasicIo::AutoPtr FileIo::temporary() const
     {
-        BasicIo::AutoPtr basicIo;
-
-        Impl::StructStat buf;
-        int ret = p_->stat(buf);
-#if defined WIN32 && !defined __CYGWIN__
-        DWORD nlink = p_->winNumberOfLinks();
-#else 
-        nlink_t nlink = buf.st_nlink;
-#endif
-
-        // If file is > 1MB and doesn't have hard links then use a file, otherwise
-        // use a memory buffer. I.e., files with hard links always use a memory
-        // buffer, which is a workaround to ensure that the links don't get broken.
-        if (ret != 0 || (buf.st_size > 1048576 && nlink == 1)) {
-            pid_t pid = ::getpid();
-            std::auto_ptr<FileIo> fileIo;
-#ifdef EXV_UNICODE_PATH
-            if (p_->wpMode_ == Impl::wpUnicode) {
-                std::wstring tmpname = wpath() + s2ws(toString(pid));
-                fileIo = std::auto_ptr<FileIo>(new FileIo(tmpname));
-            }
-            else
-#endif
-            {
-                std::string tmpname = path() + toString(pid);
-                fileIo = std::auto_ptr<FileIo>(new FileIo(tmpname));
-            }
-            if (fileIo->open("w+b") != 0) {
-#ifdef EXV_UNICODE_PATH
-                if (p_->wpMode_ == Impl::wpUnicode) {
-                    throw WError(10, wpath(), "w+b", strError().c_str());
-                }
-                else
-#endif
-                {
-                    throw Error(10, path(), "w+b", strError());
-                }
-            }
-            basicIo = fileIo;
-        }
-        else {
-            basicIo.reset(new MemIo);
-        }
-
-        return basicIo;
+	
+        return BasicIo::AutoPtr();
     }
 
     long FileIo::write(const byte* data, long wcount)
     {
-        assert(p_->fp_ != 0);
-        if (p_->switchMode(Impl::opWrite) != 0) return 0;
-        return (long)std::fwrite(data, 1, wcount, p_->fp_);
+
+        return (long)0;
     }
 
     long FileIo::write(BasicIo& src)
     {
-        assert(p_->fp_ != 0);
-        if (static_cast<BasicIo*>(this) == &src) return 0;
-        if (!src.isopen()) return 0;
-        if (p_->switchMode(Impl::opWrite) != 0) return 0;
-
-        byte buf[4096];
-        long readCount = 0;
-        long writeCount = 0;
         long writeTotal = 0;
-        while ((readCount = src.read(buf, sizeof(buf)))) {
-            writeTotal += writeCount = (long)std::fwrite(buf, 1, readCount, p_->fp_);
-            if (writeCount != readCount) {
-                // try to reset back to where write stopped
-                src.seek(writeCount-readCount, BasicIo::cur);
-                break;
-            }
-        }
-
         return writeTotal;
     }
 
     void FileIo::transfer(BasicIo& src)
     {
-        const bool wasOpen = (p_->fp_ != 0);
-        const std::string lastMode(p_->openMode_);
-
-        FileIo *fileIo = dynamic_cast<FileIo*>(&src);
-        if (fileIo) {
-            // Optimization if src is another instance of FileIo
-            fileIo->close();
-            // Check if the file can be written to, if it already exists
-            if (open("a+b") != 0) {
-                // Remove the (temporary) file
-#ifdef EXV_UNICODE_PATH
-                if (fileIo->p_->wpMode_ == Impl::wpUnicode) {
-                    ::_wremove(fileIo->wpath().c_str());
-                }
-                else
-#endif
-                {
-                    ::remove(fileIo->path().c_str());
-                }
-#ifdef EXV_UNICODE_PATH
-                if (p_->wpMode_ == Impl::wpUnicode) {
-                    throw WError(10, wpath(), "a+b", strError().c_str());
-                }
-                else
-#endif
-                {
-                    throw Error(10, path(), "a+b", strError());
-                }
-            }
-            close();
-
-            bool statOk = true;
-            mode_t origStMode = 0;
-            std::string spf;
-            char* pf = 0;
-#ifdef EXV_UNICODE_PATH
-            std::wstring wspf;
-            wchar_t* wpf = 0;
-            if (p_->wpMode_ == Impl::wpUnicode) {
-                wspf = wpath();
-                wpf = const_cast<wchar_t*>(wspf.c_str());
-            }
-            else
-#endif
-            {
-                spf = path();
-                pf = const_cast<char*>(spf.c_str());
-            }
-
-            // Get the permissions of the file, or linked-to file, on platforms which have lstat
-#ifdef EXV_HAVE_LSTAT
-
-# ifdef EXV_UNICODE_PATH
-#  error EXV_UNICODE_PATH and EXV_HAVE_LSTAT are not compatible. Stop.
-# endif
-            struct stat buf1;
-            if (::lstat(pf, &buf1) == -1) {
-                statOk = false;
-#ifndef SUPPRESS_WARNINGS
-                EXV_WARNING << Error(2, pf, strError(), "::lstat") << "\n";
-#endif
-            }
-            origStMode = buf1.st_mode;
-            DataBuf lbuf; // So that the allocated memory is freed. Must have same scope as pf
-            // In case path() is a symlink, get the path of the linked-to file
-            if (statOk && S_ISLNK(buf1.st_mode)) {
-                lbuf.alloc(buf1.st_size + 1);
-                memset(lbuf.pData_, 0x0, lbuf.size_);
-                pf = reinterpret_cast<char*>(lbuf.pData_);
-                if (::readlink(path().c_str(), pf, lbuf.size_ - 1) == -1) {
-                    throw Error(2, path(), strError(), "readlink");
-                }
-                // We need the permissions of the file, not the symlink
-                if (::stat(pf, &buf1) == -1) {
-                    statOk = false;
-#ifndef SUPPRESS_WARNINGS
-                    EXV_WARNING << Error(2, pf, strError(), "::stat") << "\n";
-#endif
-                }
-                origStMode = buf1.st_mode;
-            }
-#else // EXV_HAVE_LSTAT
-            Impl::StructStat buf1;
-            if (p_->stat(buf1) == -1) {
-                statOk = false;
-            }
-            origStMode = buf1.st_mode;
-#endif // !EXV_HAVE_LSTAT
-
-            // MSVCRT rename that does not overwrite existing files
-#ifdef EXV_UNICODE_PATH
-            if (p_->wpMode_ == Impl::wpUnicode) {
-                if (fileExists(wpf) && ::_wremove(wpf) != 0) {
-                    throw WError(2, wpf, strError().c_str(), "::_wremove");
-                }
-                if (::_wrename(fileIo->wpath().c_str(), wpf) == -1) {
-                    throw WError(17, fileIo->wpath(), wpf, strError().c_str());
-                }
-                ::_wremove(fileIo->wpath().c_str());
-                // Check permissions of new file
-                struct _stat buf2;
-                if (statOk && ::_wstat(wpf, &buf2) == -1) {
-                    statOk = false;
-#ifndef SUPPRESS_WARNINGS
-                    EXV_WARNING << Error(2, wpf, strError(), "::_wstat") << "\n";
-#endif
-                }
-                if (statOk && origStMode != buf2.st_mode) {
-                    // Set original file permissions
-                    if (::_wchmod(wpf, origStMode) == -1) {
-#ifndef SUPPRESS_WARNINGS
-                        EXV_WARNING << Error(2, wpf, strError(), "::_wchmod") << "\n";
-#endif
-                    }
-                }
-            } // if (p_->wpMode_ == Impl::wpUnicode)
-            else
-#endif // EXV_UNICODE_PATH
-            {
-                if (fileExists(pf) && ::remove(pf) != 0) {
-                    throw Error(2, pf, strError(), "::remove");
-                }
-                if (::rename(fileIo->path().c_str(), pf) == -1) {
-                    throw Error(17, fileIo->path(), pf, strError());
-                }
-                ::remove(fileIo->path().c_str());
-                // Check permissions of new file
-                struct stat buf2;
-                if (statOk && ::stat(pf, &buf2) == -1) {
-                    statOk = false;
-#ifndef SUPPRESS_WARNINGS
-                    EXV_WARNING << Error(2, pf, strError(), "::stat") << "\n";
-#endif
-                }
-                if (statOk && origStMode != buf2.st_mode) {
-                    // Set original file permissions
-                    if (::chmod(pf, origStMode) == -1) {
-#ifndef SUPPRESS_WARNINGS
-                        EXV_WARNING << Error(2, pf, strError(), "::chmod") << "\n";
-#endif
-                    }
-                }
-            }
-        } // if (fileIo)
-        else {
-            // Generic handling, reopen both to reset to start
-            if (open("w+b") != 0) {
-#ifdef EXV_UNICODE_PATH
-                if (p_->wpMode_ == Impl::wpUnicode) {
-                    throw WError(10, wpath(), "w+b", strError().c_str());
-                }
-                else
-#endif
-                {
-                    throw Error(10, path(), "w+b", strError());
-                }
-            }
-            if (src.open() != 0) {
-#ifdef EXV_UNICODE_PATH
-                if (p_->wpMode_ == Impl::wpUnicode) {
-                    throw WError(9, src.wpath(), strError().c_str());
-                }
-                else
-#endif
-                {
-                    throw Error(9, src.path(), strError());
-                }
-            }
-            write(src);
-            src.close();
-        }
-
-        if (wasOpen) {
-            if (open(lastMode) != 0) {
-#ifdef EXV_UNICODE_PATH
-                if (p_->wpMode_ == Impl::wpUnicode) {
-                    throw WError(10, wpath(), lastMode.c_str(), strError().c_str());
-                }
-                else
-#endif
-                {
-                    throw Error(10, path(), lastMode, strError());
-                }
-            }
-        }
-        else close();
-
-        if (error() || src.error()) {
-#ifdef EXV_UNICODE_PATH
-            if (p_->wpMode_ == Impl::wpUnicode) {
-                throw WError(18, wpath(), strError().c_str());
-            }
-            else
-#endif
-            {
-                throw Error(18, path(), strError());
-            }
-        }
+  
     } // FileIo::transfer
 
     int FileIo::putb(byte data)
     {
-        assert(p_->fp_ != 0);
-        if (p_->switchMode(Impl::opWrite) != 0) return EOF;
-        return putc(data, p_->fp_);
+        return 0;
     }
 
     int FileIo::seek(long offset, Position pos)
     {
-        assert(p_->fp_ != 0);
-
-        int fileSeek = 0;
-        switch (pos) {
-        case BasicIo::cur: fileSeek = SEEK_CUR; break;
-        case BasicIo::beg: fileSeek = SEEK_SET; break;
-        case BasicIo::end: fileSeek = SEEK_END; break;
-        }
-
-        if (p_->switchMode(Impl::opSeek) != 0) return 1;
-        return std::fseek(p_->fp_, offset, fileSeek);
+        return 0;
     }
 
     long FileIo::tell() const
     {
-        assert(p_->fp_ != 0);
-        return std::ftell(p_->fp_);
+        return (long)0;
     }
 
     long FileIo::size() const
     {
-        // Flush and commit only if the file is open for writing
-        if (p_->fp_ != 0 && (p_->openMode_[0] != 'r' || p_->openMode_[1] == '+')) {
-            std::fflush(p_->fp_);
-#if defined WIN32 && !defined __CYGWIN__
-            // This is required on msvcrt before stat after writing to a file
-            _commit(_fileno(p_->fp_));
-#endif
-        }
-
-        Impl::StructStat buf;
-        int ret = p_->stat(buf);
-
-        if (ret != 0) return -1;
-        return buf.st_size;
+           long writeTotal = 0;
+        return writeTotal;
     }
 
     int FileIo::open()
     {
         // Default open is in read-only binary mode
-        return open("rb");
+        return 0;
     }
 
     int FileIo::open(const std::string& mode)
     {
-        close();
-        p_->openMode_ = mode;
-        p_->opMode_ = Impl::opSeek;
-#ifdef EXV_UNICODE_PATH
-        if (p_->wpMode_ == Impl::wpUnicode) {
-            p_->fp_ = ::_wfopen(wpath().c_str(), s2ws(mode).c_str());
-        }
-        else
-#endif
-        {
-            p_->fp_ = ::fopen(path().c_str(), mode.c_str());
-        }
-        if (!p_->fp_) return 1;
         return 0;
     }
 
     bool FileIo::isopen() const
     {
-        return p_->fp_ != 0;
+        return 0;
     }
 
     int FileIo::close()
     {
         int rc = 0;
-        if (munmap() != 0) rc = 2;
-        if (p_->fp_ != 0) {
-            if (std::fclose(p_->fp_) != 0) rc |= 1;
-            p_->fp_= 0;
-        }
         return rc;
     }
 
     DataBuf FileIo::read(long rcount)
     {
-        assert(p_->fp_ != 0);
         DataBuf buf(rcount);
-        long readCount = read(buf.pData_, buf.size_);
-        buf.size_ = readCount;
         return buf;
     }
 
     long FileIo::read(byte* buf, long rcount)
     {
-        assert(p_->fp_ != 0);
-        if (p_->switchMode(Impl::opRead) != 0) return 0;
-        return (long)std::fread(buf, 1, rcount, p_->fp_);
+        long writeTotal = 0;
+        return writeTotal;
     }
 
     int FileIo::getb()
     {
-        assert(p_->fp_ != 0);
-        if (p_->switchMode(Impl::opRead) != 0) return EOF;
-        return getc(p_->fp_);
+        return 0;
     }
 
     int FileIo::error() const
     {
-        return p_->fp_ != 0 ? ferror(p_->fp_) : 0;
+        return 0;
     }
 
     bool FileIo::eof() const
     {
-        assert(p_->fp_ != 0);
-        return feof(p_->fp_) != 0;
+        return 1 != 0;
     }
 
     std::string FileIo::path() const
     {
-#ifdef EXV_UNICODE_PATH
-        if (p_->wpMode_ == Impl::wpUnicode) {
-            return ws2s(p_->wpath_);
-        }
-#endif
-        return p_->path_;
+
+        return std::string("");
     }
 
 #ifdef EXV_UNICODE_PATH
     std::wstring FileIo::wpath() const
     {
-        if (p_->wpMode_ == Impl::wpStandard) {
-            return s2ws(p_->path_);
-        }
-        return p_->wpath_;
+        return std::wstring("");
     }
 
 #endif
@@ -1164,59 +590,29 @@
 
     DataBuf readFile(const std::string& path)
     {
-        FileIo file(path);
-        if (file.open("rb") != 0) {
-            throw Error(10, path, "rb", strError());
-        }
-        struct stat st;
-        if (0 != ::stat(path.c_str(), &st)) {
-            throw Error(2, path, strError(), "::stat");
-        }
-        DataBuf buf(st.st_size);
-        long len = file.read(buf.pData_, buf.size_);
-        if (len != buf.size_) {
-            throw Error(2, path, strError(), "FileIo::read");
-        }
+        DataBuf buf(1);
         return buf;
     }
 
 #ifdef EXV_UNICODE_PATH
     DataBuf readFile(const std::wstring& wpath)
     {
-        FileIo file(wpath);
-        if (file.open("rb") != 0) {
-            throw WError(10, wpath, "rb", strError().c_str());
-        }
-        struct _stat st;
-        if (0 != ::_wstat(wpath.c_str(), &st)) {
-            throw WError(2, wpath, strError().c_str(), "::_wstat");
-        }
-        DataBuf buf(st.st_size);
-        long len = file.read(buf.pData_, buf.size_);
-        if (len != buf.size_) {
-            throw WError(2, wpath, strError().c_str(), "FileIo::read");
-        }
+        DataBuf buf(1);
         return buf;
     }
 
 #endif
     long writeFile(const DataBuf& buf, const std::string& path)
     {
-        FileIo file(path);
-        if (file.open("wb") != 0) {
-            throw Error(10, path, "wb", strError());
-        }
-        return file.write(buf.pData_, buf.size_);
+           long writeTotal = 0;
+        return writeTotal;
     }
 
 #ifdef EXV_UNICODE_PATH
     long writeFile(const DataBuf& buf, const std::wstring& wpath)
     {
-        FileIo file(wpath);
-        if (file.open("wb") != 0) {
-            throw WError(10, wpath, "wb", strError().c_str());
-        }
-        return file.write(buf.pData_, buf.size_);
+          long writeTotal = 0;
+        return writeTotal;
     }
 
 #endif
